function [U, S, V, elapsed, relErr] = random_svd(A, Omega, recordTime)
% RANDOM_SVD   Compute rank-k approximation via HMT randomized SVD.
%   [U,S,V,elapsed,relErr] = random_svd(A,Omega,recordTime)
%
%   Inputs:
%     A          — (n×m) data matrix
%     Omega      — (m×k) sketching matrix
%     recordTime — logical flag; if true, measure time and compute error
%
%   Outputs:
%     U (n×k), S (k×k), V (m×k) so that A ≈ U*S*V'
%     elapsed    — time for sketch/QR/SVD steps (empty if recordTime=false)
%     relErr     — ‖A − U*S*V'‖_F / ‖A‖_F (empty if recordTime=false)

  if nargin<3, recordTime = false; end
  if recordTime, t0 = tic; end

  % form sketch and orthonormal basis
  Y = A * Omega;           
  [Q,~] = qr(Y,0);

  % project back and compute small SVD
  B = Q' * A;              
  [Uc, Sc_full, V_full] = svd(B, 'econ');
  k = size(Omega,2);
  Uc_k = Uc(:,1:k);
  Sc   = Sc_full(1:k,1:k);
  V    = V_full(:,1:k);

  % reconstruct U
  U = Q * Uc_k;
  S = Sc;

  if recordTime
    elapsed = toc(t0);
    Arec    = U * S * V';
    relErr  = norm(A - Arec, 'fro') / norm(A, 'fro');
  else
    elapsed = [];
    relErr  = [];
  end
end
